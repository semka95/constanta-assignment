// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package postgres

import (
	"context"
	"sync"
)

// Ensure, that QuerierMock does implement Querier.
// If this is not the case, regenerate this file with moq.
var _ Querier = &QuerierMock{}

// QuerierMock is a mock implementation of Querier.
//
// 	func TestSomethingThatUsesQuerier(t *testing.T) {
//
// 		// make and configure a mocked Querier
// 		mockedQuerier := &QuerierMock{
// 			CreateTransferFunc: func(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
// 				panic("mock out the CreateTransfer method")
// 			},
// 			DiscardTransferFunc: func(ctx context.Context, id int64) (int64, error) {
// 				panic("mock out the DiscardTransfer method")
// 			},
// 			GetTransferStatusByIDFunc: func(ctx context.Context, id int64) (ValidStatus, error) {
// 				panic("mock out the GetTransferStatusByID method")
// 			},
// 			ListUserTransfersByEmailFunc: func(ctx context.Context, arg ListUserTransfersByEmailParams) ([]Transfer, error) {
// 				panic("mock out the ListUserTransfersByEmail method")
// 			},
// 			ListUserTransfersByIDFunc: func(ctx context.Context, arg ListUserTransfersByIDParams) ([]Transfer, error) {
// 				panic("mock out the ListUserTransfersByID method")
// 			},
// 			UpdateTransferStatusFunc: func(ctx context.Context, arg UpdateTransferStatusParams) (int64, error) {
// 				panic("mock out the UpdateTransferStatus method")
// 			},
// 		}
//
// 		// use mockedQuerier in code that requires Querier
// 		// and then make assertions.
//
// 	}
type QuerierMock struct {
	// CreateTransferFunc mocks the CreateTransfer method.
	CreateTransferFunc func(ctx context.Context, arg CreateTransferParams) (Transfer, error)

	// DiscardTransferFunc mocks the DiscardTransfer method.
	DiscardTransferFunc func(ctx context.Context, id int64) (int64, error)

	// GetTransferStatusByIDFunc mocks the GetTransferStatusByID method.
	GetTransferStatusByIDFunc func(ctx context.Context, id int64) (ValidStatus, error)

	// ListUserTransfersByEmailFunc mocks the ListUserTransfersByEmail method.
	ListUserTransfersByEmailFunc func(ctx context.Context, arg ListUserTransfersByEmailParams) ([]Transfer, error)

	// ListUserTransfersByIDFunc mocks the ListUserTransfersByID method.
	ListUserTransfersByIDFunc func(ctx context.Context, arg ListUserTransfersByIDParams) ([]Transfer, error)

	// UpdateTransferStatusFunc mocks the UpdateTransferStatus method.
	UpdateTransferStatusFunc func(ctx context.Context, arg UpdateTransferStatusParams) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransfer holds details about calls to the CreateTransfer method.
		CreateTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg CreateTransferParams
		}
		// DiscardTransfer holds details about calls to the DiscardTransfer method.
		DiscardTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetTransferStatusByID holds details about calls to the GetTransferStatusByID method.
		GetTransferStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// ListUserTransfersByEmail holds details about calls to the ListUserTransfersByEmail method.
		ListUserTransfersByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg ListUserTransfersByEmailParams
		}
		// ListUserTransfersByID holds details about calls to the ListUserTransfersByID method.
		ListUserTransfersByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg ListUserTransfersByIDParams
		}
		// UpdateTransferStatus holds details about calls to the UpdateTransferStatus method.
		UpdateTransferStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg UpdateTransferStatusParams
		}
	}
	lockCreateTransfer           sync.RWMutex
	lockDiscardTransfer          sync.RWMutex
	lockGetTransferStatusByID    sync.RWMutex
	lockListUserTransfersByEmail sync.RWMutex
	lockListUserTransfersByID    sync.RWMutex
	lockUpdateTransferStatus     sync.RWMutex
}

// CreateTransfer calls CreateTransferFunc.
func (mock *QuerierMock) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	if mock.CreateTransferFunc == nil {
		panic("QuerierMock.CreateTransferFunc: method is nil but Querier.CreateTransfer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg CreateTransferParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateTransfer.Lock()
	mock.calls.CreateTransfer = append(mock.calls.CreateTransfer, callInfo)
	mock.lockCreateTransfer.Unlock()
	return mock.CreateTransferFunc(ctx, arg)
}

// CreateTransferCalls gets all the calls that were made to CreateTransfer.
// Check the length with:
//     len(mockedQuerier.CreateTransferCalls())
func (mock *QuerierMock) CreateTransferCalls() []struct {
	Ctx context.Context
	Arg CreateTransferParams
} {
	var calls []struct {
		Ctx context.Context
		Arg CreateTransferParams
	}
	mock.lockCreateTransfer.RLock()
	calls = mock.calls.CreateTransfer
	mock.lockCreateTransfer.RUnlock()
	return calls
}

// DiscardTransfer calls DiscardTransferFunc.
func (mock *QuerierMock) DiscardTransfer(ctx context.Context, id int64) (int64, error) {
	if mock.DiscardTransferFunc == nil {
		panic("QuerierMock.DiscardTransferFunc: method is nil but Querier.DiscardTransfer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDiscardTransfer.Lock()
	mock.calls.DiscardTransfer = append(mock.calls.DiscardTransfer, callInfo)
	mock.lockDiscardTransfer.Unlock()
	return mock.DiscardTransferFunc(ctx, id)
}

// DiscardTransferCalls gets all the calls that were made to DiscardTransfer.
// Check the length with:
//     len(mockedQuerier.DiscardTransferCalls())
func (mock *QuerierMock) DiscardTransferCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDiscardTransfer.RLock()
	calls = mock.calls.DiscardTransfer
	mock.lockDiscardTransfer.RUnlock()
	return calls
}

// GetTransferStatusByID calls GetTransferStatusByIDFunc.
func (mock *QuerierMock) GetTransferStatusByID(ctx context.Context, id int64) (ValidStatus, error) {
	if mock.GetTransferStatusByIDFunc == nil {
		panic("QuerierMock.GetTransferStatusByIDFunc: method is nil but Querier.GetTransferStatusByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTransferStatusByID.Lock()
	mock.calls.GetTransferStatusByID = append(mock.calls.GetTransferStatusByID, callInfo)
	mock.lockGetTransferStatusByID.Unlock()
	return mock.GetTransferStatusByIDFunc(ctx, id)
}

// GetTransferStatusByIDCalls gets all the calls that were made to GetTransferStatusByID.
// Check the length with:
//     len(mockedQuerier.GetTransferStatusByIDCalls())
func (mock *QuerierMock) GetTransferStatusByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetTransferStatusByID.RLock()
	calls = mock.calls.GetTransferStatusByID
	mock.lockGetTransferStatusByID.RUnlock()
	return calls
}

// ListUserTransfersByEmail calls ListUserTransfersByEmailFunc.
func (mock *QuerierMock) ListUserTransfersByEmail(ctx context.Context, arg ListUserTransfersByEmailParams) ([]Transfer, error) {
	if mock.ListUserTransfersByEmailFunc == nil {
		panic("QuerierMock.ListUserTransfersByEmailFunc: method is nil but Querier.ListUserTransfersByEmail was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg ListUserTransfersByEmailParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockListUserTransfersByEmail.Lock()
	mock.calls.ListUserTransfersByEmail = append(mock.calls.ListUserTransfersByEmail, callInfo)
	mock.lockListUserTransfersByEmail.Unlock()
	return mock.ListUserTransfersByEmailFunc(ctx, arg)
}

// ListUserTransfersByEmailCalls gets all the calls that were made to ListUserTransfersByEmail.
// Check the length with:
//     len(mockedQuerier.ListUserTransfersByEmailCalls())
func (mock *QuerierMock) ListUserTransfersByEmailCalls() []struct {
	Ctx context.Context
	Arg ListUserTransfersByEmailParams
} {
	var calls []struct {
		Ctx context.Context
		Arg ListUserTransfersByEmailParams
	}
	mock.lockListUserTransfersByEmail.RLock()
	calls = mock.calls.ListUserTransfersByEmail
	mock.lockListUserTransfersByEmail.RUnlock()
	return calls
}

// ListUserTransfersByID calls ListUserTransfersByIDFunc.
func (mock *QuerierMock) ListUserTransfersByID(ctx context.Context, arg ListUserTransfersByIDParams) ([]Transfer, error) {
	if mock.ListUserTransfersByIDFunc == nil {
		panic("QuerierMock.ListUserTransfersByIDFunc: method is nil but Querier.ListUserTransfersByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg ListUserTransfersByIDParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockListUserTransfersByID.Lock()
	mock.calls.ListUserTransfersByID = append(mock.calls.ListUserTransfersByID, callInfo)
	mock.lockListUserTransfersByID.Unlock()
	return mock.ListUserTransfersByIDFunc(ctx, arg)
}

// ListUserTransfersByIDCalls gets all the calls that were made to ListUserTransfersByID.
// Check the length with:
//     len(mockedQuerier.ListUserTransfersByIDCalls())
func (mock *QuerierMock) ListUserTransfersByIDCalls() []struct {
	Ctx context.Context
	Arg ListUserTransfersByIDParams
} {
	var calls []struct {
		Ctx context.Context
		Arg ListUserTransfersByIDParams
	}
	mock.lockListUserTransfersByID.RLock()
	calls = mock.calls.ListUserTransfersByID
	mock.lockListUserTransfersByID.RUnlock()
	return calls
}

// UpdateTransferStatus calls UpdateTransferStatusFunc.
func (mock *QuerierMock) UpdateTransferStatus(ctx context.Context, arg UpdateTransferStatusParams) (int64, error) {
	if mock.UpdateTransferStatusFunc == nil {
		panic("QuerierMock.UpdateTransferStatusFunc: method is nil but Querier.UpdateTransferStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Arg UpdateTransferStatusParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateTransferStatus.Lock()
	mock.calls.UpdateTransferStatus = append(mock.calls.UpdateTransferStatus, callInfo)
	mock.lockUpdateTransferStatus.Unlock()
	return mock.UpdateTransferStatusFunc(ctx, arg)
}

// UpdateTransferStatusCalls gets all the calls that were made to UpdateTransferStatus.
// Check the length with:
//     len(mockedQuerier.UpdateTransferStatusCalls())
func (mock *QuerierMock) UpdateTransferStatusCalls() []struct {
	Ctx context.Context
	Arg UpdateTransferStatusParams
} {
	var calls []struct {
		Ctx context.Context
		Arg UpdateTransferStatusParams
	}
	mock.lockUpdateTransferStatus.RLock()
	calls = mock.calls.UpdateTransferStatus
	mock.lockUpdateTransferStatus.RUnlock()
	return calls
}
