// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/shopspring/decimal"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers(
    user_id, email, amount, currency
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, user_id, email, amount, currency, created_at, updated_at, transfer_status
`

type CreateTransferParams struct {
	UserID   int64           `json:"user_id"`
	Email    string          `json:"email"`
	Amount   decimal.Decimal `json:"amount"`
	Currency ValidCurrency   `json:"currency"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.UserID,
		arg.Email,
		arg.Amount,
		arg.Currency,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TransferStatus,
	)
	return i, err
}

const discardTransfer = `-- name: DiscardTransfer :execrows
DELETE FROM transfers 
WHERE id = $1 AND transfer_status NOT IN ('success', 'failure')
`

func (q *Queries) DiscardTransfer(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, discardTransfer, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getTransferStatusByID = `-- name: GetTransferStatusByID :one
SELECT transfer_status FROM transfers
WHERE id = $1
`

func (q *Queries) GetTransferStatusByID(ctx context.Context, id int64) (ValidStatus, error) {
	row := q.db.QueryRowContext(ctx, getTransferStatusByID, id)
	var transfer_status ValidStatus
	err := row.Scan(&transfer_status)
	return transfer_status, err
}

const listUserTransfersByEmail = `-- name: ListUserTransfersByEmail :many
SELECT id, user_id, email, amount, currency, created_at, updated_at, transfer_status FROM transfers
WHERE email = $1 AND id > $2
LIMIT $3
`

type ListUserTransfersByEmailParams struct {
	Email string `json:"email"`
	ID    int64  `json:"id"`
	Limit int32  `json:"limit"`
}

func (q *Queries) ListUserTransfersByEmail(ctx context.Context, arg ListUserTransfersByEmailParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listUserTransfersByEmail, arg.Email, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransferStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTransfersByID = `-- name: ListUserTransfersByID :many
SELECT id, user_id, email, amount, currency, created_at, updated_at, transfer_status FROM transfers
WHERE user_id = $1 AND id > $2
LIMIT $3
`

type ListUserTransfersByIDParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListUserTransfersByID(ctx context.Context, arg ListUserTransfersByIDParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listUserTransfersByID, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransferStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransferStatus = `-- name: UpdateTransferStatus :execrows
UPDATE transfers
SET transfer_status = $2,
    updated_at = NOW()
WHERE id = $1 AND transfer_status NOT IN ('success', 'failure')
`

type UpdateTransferStatusParams struct {
	ID             int64       `json:"id"`
	TransferStatus ValidStatus `json:"transfer_status"`
}

func (q *Queries) UpdateTransferStatus(ctx context.Context, arg UpdateTransferStatusParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTransferStatus, arg.ID, arg.TransferStatus)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
